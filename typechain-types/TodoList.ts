/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace TodoList {
  export type TodoItemStruct = {
    todoId: BigNumberish;
    title: string;
    finished: boolean;
    creator: string;
    amount: BigNumberish;
  };

  export type TodoItemStructOutput = [
    BigNumber,
    string,
    boolean,
    string,
    BigNumber
  ] & {
    todoId: BigNumber;
    title: string;
    finished: boolean;
    creator: string;
    amount: BigNumber;
  };
}

export interface TodoListInterface extends utils.Interface {
  functions: {
    "completeTodo(uint256)": FunctionFragment;
    "createTodo(string)": FunctionFragment;
    "fetchTodo(uint256)": FunctionFragment;
    "fetchUnfinishedTodos()": FunctionFragment;
    "findTodo(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "completeTodo"
      | "createTodo"
      | "fetchTodo"
      | "fetchUnfinishedTodos"
      | "findTodo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "completeTodo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "createTodo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "fetchTodo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchUnfinishedTodos",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "findTodo",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "completeTodo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createTodo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fetchTodo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fetchUnfinishedTodos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "findTodo", data: BytesLike): Result;

  events: {
    "TodoCompleted()": EventFragment;
    "TodoCreated(uint256)": EventFragment;
    "TodoExpired()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TodoCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TodoCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TodoExpired"): EventFragment;
}

export interface TodoCompletedEventObject {}
export type TodoCompletedEvent = TypedEvent<[], TodoCompletedEventObject>;

export type TodoCompletedEventFilter = TypedEventFilter<TodoCompletedEvent>;

export interface TodoCreatedEventObject {
  todoId: BigNumber;
}
export type TodoCreatedEvent = TypedEvent<[BigNumber], TodoCreatedEventObject>;

export type TodoCreatedEventFilter = TypedEventFilter<TodoCreatedEvent>;

export interface TodoExpiredEventObject {}
export type TodoExpiredEvent = TypedEvent<[], TodoExpiredEventObject>;

export type TodoExpiredEventFilter = TypedEventFilter<TodoExpiredEvent>;

export interface TodoList extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TodoListInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    completeTodo(
      todoId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createTodo(
      title: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fetchTodo(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[TodoList.TodoItemStructOutput]>;

    fetchUnfinishedTodos(
      overrides?: CallOverrides
    ): Promise<[TodoList.TodoItemStructOutput[]]>;

    findTodo(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[TodoList.TodoItemStructOutput]>;
  };

  completeTodo(
    todoId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createTodo(
    title: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fetchTodo(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<TodoList.TodoItemStructOutput>;

  fetchUnfinishedTodos(
    overrides?: CallOverrides
  ): Promise<TodoList.TodoItemStructOutput[]>;

  findTodo(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<TodoList.TodoItemStructOutput>;

  callStatic: {
    completeTodo(
      todoId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createTodo(title: string, overrides?: CallOverrides): Promise<void>;

    fetchTodo(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<TodoList.TodoItemStructOutput>;

    fetchUnfinishedTodos(
      overrides?: CallOverrides
    ): Promise<TodoList.TodoItemStructOutput[]>;

    findTodo(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<TodoList.TodoItemStructOutput>;
  };

  filters: {
    "TodoCompleted()"(): TodoCompletedEventFilter;
    TodoCompleted(): TodoCompletedEventFilter;

    "TodoCreated(uint256)"(todoId?: null): TodoCreatedEventFilter;
    TodoCreated(todoId?: null): TodoCreatedEventFilter;

    "TodoExpired()"(): TodoExpiredEventFilter;
    TodoExpired(): TodoExpiredEventFilter;
  };

  estimateGas: {
    completeTodo(
      todoId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createTodo(
      title: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fetchTodo(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    fetchUnfinishedTodos(overrides?: CallOverrides): Promise<BigNumber>;

    findTodo(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    completeTodo(
      todoId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createTodo(
      title: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fetchTodo(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchUnfinishedTodos(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    findTodo(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
